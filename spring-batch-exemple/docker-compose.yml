# ---------------------  volumes configuration  ----------------------

volumes:
  postgres:
  zookeeper:
  broker:
  bucket:

# ---------------------  services configuration  ----------------------

services:

  # ------- catalog backend, batch and frontend -------

  spring-batch:
    image: demo/spring-batch:latest
    container_name: spring-batch
    environment:
      MINIO_ACCESS_KEY: mYBFFxkVzazoqE9OhG5t
      MINIO_SECRET_KEY: H3wCTzvwiAlmwrdY8os9Hov1tDfd7F1XQhiJa955
    depends_on:
      - db
      - broker
      - bucket

  # --------------  infrastructure services --------------

  db:
    image: postgres:latest
    container_name: postgres
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 1m30s
      timeout: 5s
      retries: 3
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: my_password
    volumes:
      - postgres:/var/lib/postgresql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 1m30s
      timeout: 5s
      retries: 3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper:/var/lib/zookeeper/data
      - zookeeper:/var/lib/zookeeper/log
      - zookeeper:/etc/zookeeper/secrets

  broker:
    image: confluentinc/cp-kafka:latest
    container_name: broker
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 1m30s
      timeout: 5s
      retries: 3
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - broker:/var/lib/kafka/data
      - broker:/etc/kafka/secrets
    depends_on:
      - zookeeper

  bucket:
    image: bitnami/minio:latest
    container_name: minio
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: minio_password
    volumes:
      - bucket:/data
      - bucket:/certs
      - bucket:/bitnami/minio/data
